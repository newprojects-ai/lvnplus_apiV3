
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Exam_boardsScalarFieldEnum = {
  board_id: 'board_id',
  board_name: 'board_name',
  description: 'description',
  input_type: 'input_type'
};

exports.Prisma.QuestionsScalarFieldEnum = {
  question_id: 'question_id',
  subtopic_id: 'subtopic_id',
  question_text: 'question_text',
  question_text_plain: 'question_text_plain',
  options: 'options',
  correct_answer: 'correct_answer',
  correct_answer_plain: 'correct_answer_plain',
  solution: 'solution',
  solution_plain: 'solution_plain',
  difficulty_level: 'difficulty_level',
  created_at: 'created_at',
  created_by: 'created_by',
  active: 'active'
};

exports.Prisma.RolesScalarFieldEnum = {
  role_id: 'role_id',
  role_name: 'role_name',
  description: 'description'
};

exports.Prisma.SubjectsScalarFieldEnum = {
  subject_id: 'subject_id',
  subject_name: 'subject_name',
  description: 'description'
};

exports.Prisma.SubtopicsScalarFieldEnum = {
  subtopic_id: 'subtopic_id',
  topic_id: 'topic_id',
  subtopic_name: 'subtopic_name',
  description: 'description'
};

exports.Prisma.Test_executionsScalarFieldEnum = {
  execution_id: 'execution_id',
  test_plan_id: 'test_plan_id',
  student_id: 'student_id',
  status: 'status',
  started_at: 'started_at',
  completed_at: 'completed_at',
  test_data: 'test_data',
  score: 'score'
};

exports.Prisma.Test_plansScalarFieldEnum = {
  test_plan_id: 'test_plan_id',
  template_id: 'template_id',
  board_id: 'board_id',
  test_type: 'test_type',
  timing_type: 'timing_type',
  time_limit: 'time_limit',
  student_id: 'student_id',
  planned_by: 'planned_by',
  planned_at: 'planned_at',
  configuration: 'configuration'
};

exports.Prisma.Test_templatesScalarFieldEnum = {
  template_id: 'template_id',
  template_name: 'template_name',
  source: 'source',
  created_by: 'created_by',
  created_at: 'created_at',
  board_id: 'board_id',
  test_type: 'test_type',
  timing_type: 'timing_type',
  time_limit: 'time_limit',
  configuration: 'configuration',
  active: 'active'
};

exports.Prisma.TopicsScalarFieldEnum = {
  topic_id: 'topic_id',
  subject_id: 'subject_id',
  topic_name: 'topic_name',
  description: 'description'
};

exports.Prisma.User_rolesScalarFieldEnum = {
  user_id: 'user_id',
  role_id: 'role_id'
};

exports.Prisma.UsersScalarFieldEnum = {
  user_id: 'user_id',
  email: 'email',
  password_hash: 'password_hash',
  first_name: 'first_name',
  last_name: 'last_name',
  created_at: 'created_at',
  updated_at: 'updated_at',
  active: 'active'
};

exports.Prisma.Difficulty_levelsScalarFieldEnum = {
  level_id: 'level_id',
  level_name: 'level_name',
  level_value: 'level_value',
  purpose: 'purpose',
  characteristics: 'characteristics',
  focus_area: 'focus_area',
  steps_required: 'steps_required',
  created_at: 'created_at',
  active: 'active'
};

exports.Prisma.Student_progressScalarFieldEnum = {
  user_id: 'user_id',
  level: 'level',
  current_xp: 'current_xp',
  next_level_xp: 'next_level_xp',
  streak_days: 'streak_days',
  last_activity_date: 'last_activity_date',
  total_points: 'total_points',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AchievementsScalarFieldEnum = {
  achievement_id: 'achievement_id',
  title: 'title',
  description: 'description',
  category: 'category',
  points: 'points',
  icon: 'icon',
  required_criteria: 'required_criteria',
  created_at: 'created_at'
};

exports.Prisma.Student_achievementsScalarFieldEnum = {
  user_id: 'user_id',
  achievement_id: 'achievement_id',
  unlocked_at: 'unlocked_at',
  progress: 'progress'
};

exports.Prisma.RewardsScalarFieldEnum = {
  reward_id: 'reward_id',
  title: 'title',
  description: 'description',
  category: 'category',
  cost: 'cost',
  icon: 'icon',
  created_at: 'created_at'
};

exports.Prisma.Student_rewardsScalarFieldEnum = {
  user_id: 'user_id',
  reward_id: 'reward_id',
  purchased_at: 'purchased_at'
};

exports.Prisma.Subject_masteryScalarFieldEnum = {
  user_id: 'user_id',
  subject_id: 'subject_id',
  mastery_level: 'mastery_level',
  total_questions_attempted: 'total_questions_attempted',
  correct_answers: 'correct_answers',
  last_test_date: 'last_test_date'
};

exports.Prisma.Activity_logScalarFieldEnum = {
  activity_id: 'activity_id',
  user_id: 'user_id',
  activity_type: 'activity_type',
  xp_earned: 'xp_earned',
  details: 'details',
  created_at: 'created_at'
};

exports.Prisma.Level_configScalarFieldEnum = {
  level: 'level',
  xp_required: 'xp_required',
  perks: 'perks',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.exam_boards_input_type = exports.$Enums.exam_boards_input_type = {
  NUMERIC: 'NUMERIC',
  MCQ: 'MCQ'
};

exports.test_executions_status = exports.$Enums.test_executions_status = {
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  ABANDONED: 'ABANDONED'
};

exports.test_plans_test_type = exports.$Enums.test_plans_test_type = {
  TOPIC: 'TOPIC',
  MIXED: 'MIXED',
  MENTAL_ARITHMETIC: 'MENTAL_ARITHMETIC'
};

exports.test_plans_timing_type = exports.$Enums.test_plans_timing_type = {
  TIMED: 'TIMED',
  UNTIMED: 'UNTIMED'
};

exports.test_templates_source = exports.$Enums.test_templates_source = {
  SYSTEM: 'SYSTEM',
  USER: 'USER'
};

exports.test_templates_test_type = exports.$Enums.test_templates_test_type = {
  TOPIC: 'TOPIC',
  MIXED: 'MIXED',
  MENTAL_ARITHMETIC: 'MENTAL_ARITHMETIC'
};

exports.test_templates_timing_type = exports.$Enums.test_templates_timing_type = {
  TIMED: 'TIMED',
  UNTIMED: 'UNTIMED'
};

exports.Prisma.ModelName = {
  exam_boards: 'exam_boards',
  questions: 'questions',
  roles: 'roles',
  subjects: 'subjects',
  subtopics: 'subtopics',
  test_executions: 'test_executions',
  test_plans: 'test_plans',
  test_templates: 'test_templates',
  topics: 'topics',
  user_roles: 'user_roles',
  users: 'users',
  difficulty_levels: 'difficulty_levels',
  student_progress: 'student_progress',
  achievements: 'achievements',
  student_achievements: 'student_achievements',
  rewards: 'rewards',
  student_rewards: 'student_rewards',
  subject_mastery: 'subject_mastery',
  activity_log: 'activity_log',
  level_config: 'level_config'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
