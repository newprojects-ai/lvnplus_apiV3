generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model exam_boards {
  board_id       Int                    @id @default(autoincrement())
  board_name     String                 @unique(map: "board_name") @db.VarChar(100)
  description    String?                @db.Text
  input_type     exam_boards_input_type
  test_plans     test_plans[]
  test_templates test_templates[]
}

model questions {
  question_id          BigInt    @id @default(autoincrement())
  subtopic_id          Int
  question_text        String    @db.Text
  question_text_plain  String    @db.Text
  options              String    @db.LongText
  correct_answer       String    @db.VarChar(255)
  correct_answer_plain String    @db.VarChar(255)
  solution             String    @db.Text
  solution_plain       String    @db.Text
  difficulty_level     Int       @db.TinyInt
  created_at           DateTime? @default(now()) @db.Timestamp(0)
  created_by           BigInt
  active               Boolean?  @default(true)
  subtopics            subtopics @relation(fields: [subtopic_id], references: [subtopic_id], onUpdate: Restrict, map: "questions_ibfk_1")
  users                users     @relation(fields: [created_by], references: [user_id], onUpdate: Restrict, map: "questions_ibfk_2")
  question_set_items   question_set_items[]

  @@index([created_by], map: "created_by")
  @@index([difficulty_level], map: "idx_questions_difficulty")
  @@index([subtopic_id], map: "subtopic_id")
}

model question_set_items {
  item_id     BigInt        @id @default(autoincrement())
  set_id      BigInt
  question_id BigInt
  sequence    Int
  created_at  DateTime      @default(now())
  question_set question_sets @relation(fields: [set_id], references: [set_id], onDelete: Cascade)
  question    questions     @relation(fields: [question_id], references: [question_id], onDelete: Cascade)

  @@index([set_id])
  @@index([question_id])
}

model question_sets {
  set_id                BigInt                   @id @default(autoincrement())
  name                  String                   @db.VarChar(255)
  description           String?                  @db.Text
  created_by           BigInt
  created_at           DateTime                 @default(now())
  updated_at           DateTime                 @updatedAt
  active               Boolean                  @default(true)
  metadata             String?                  @db.Text
  
  // Relations
  creator              users                    @relation("CreatedQuestionSets", fields: [created_by], references: [user_id], onUpdate: Restrict)
  question_set_items   question_set_items[]
  test_plan_links     test_plan_question_sets[]

  @@index([created_by])
}

model roles {
  role_id     Int          @id @default(autoincrement())
  role_name   String       @unique(map: "role_name") @db.VarChar(50)
  description String?      @db.Text
  user_roles  user_roles[]
}

model subjects {
  subject_id      Int               @id @default(autoincrement())
  subject_name    String            @unique(map: "subject_name") @db.VarChar(100)
  description     String?           @db.Text
  topics          topics[]
  subject_mastery subject_mastery[]
}

model subtopics {
  subtopic_id   Int         @id @default(autoincrement())
  topic_id      Int
  subtopic_name String      @db.VarChar(100)
  description   String?     @db.Text
  questions     questions[]
  topics        topics      @relation(fields: [topic_id], references: [topic_id], onUpdate: Restrict, map: "subtopics_ibfk_1")

  @@unique([topic_id, subtopic_name], map: "unique_subtopic")
}

model test_executions {
  execution_id BigInt                 @id @default(autoincrement())
  test_plan_id BigInt
  student_id   BigInt // Student who took the test
  status       test_executions_status
  started_at   DateTime?              @db.Timestamp(0)
  completed_at DateTime?              @db.Timestamp(0)
  test_data    String                 @db.LongText
  score        Int?
  test_plans   test_plans             @relation(fields: [test_plan_id], references: [test_plan_id], onUpdate: Restrict, map: "test_executions_ibfk_1")
  users        users                  @relation(fields: [student_id], references: [user_id], onUpdate: Restrict, map: "test_executions_ibfk_2")

  @@index([status], map: "idx_test_executions_status")
  @@index([test_plan_id], map: "test_plan_id")
  @@index([student_id], map: "idx_test_executions_student")
}

model test_plan_question_sets {
  link_id      BigInt        @id @default(autoincrement())
  test_plan_id BigInt
  set_id       BigInt
  sequence     Int
  created_at   DateTime      @default(now())
  test_plan   test_plans    @relation(fields: [test_plan_id], references: [test_plan_id], onDelete: Cascade)
  question_set question_sets @relation(fields: [set_id], references: [set_id], onDelete: Cascade)

  @@index([test_plan_id])
  @@index([set_id])
}

model test_plans {
  test_plan_id                       BigInt                 @id @default(autoincrement())
  template_id                        BigInt?
  board_id                           Int
  test_type                          test_plans_test_type
  timing_type                        test_plans_timing_type
  time_limit                         Int?
  student_id                         BigInt
  planned_by                         BigInt
  planned_at                         DateTime?              @default(now()) @db.Timestamp(0)
  configuration                      String                 @db.LongText
  
  // Relations
  test_executions                    test_executions[]
  test_templates                     test_templates?        @relation(fields: [template_id], references: [template_id], onDelete: Restrict, onUpdate: Restrict)
  exam_boards                        exam_boards            @relation(fields: [board_id], references: [board_id], onUpdate: Restrict)
  student                           users                  @relation("test_plans_student_idTousers", fields: [student_id], references: [user_id], onUpdate: Restrict)
  planner                           users                  @relation("test_plans_planned_byTousers", fields: [planned_by], references: [user_id], onUpdate: Restrict)
  study_groups                      study_groups[]         @relation("GroupTests")
  assignments                       test_assignments[]
  question_set_links               test_plan_question_sets[]

  @@index([template_id])
  @@index([board_id])
  @@index([student_id])
  @@index([planned_by])
}

model test_templates {
  template_id   BigInt                     @id @default(autoincrement())
  template_name String                     @db.VarChar(255)
  source        test_templates_source
  created_by    BigInt
  created_at    DateTime?                  @default(now()) @db.Timestamp(0)
  board_id      Int
  test_type     test_templates_test_type
  timing_type   test_templates_timing_type
  time_limit    Int?
  configuration String                     @db.LongText
  active        Boolean?                   @default(true)
  test_plans    test_plans[]
  users         users                      @relation(fields: [created_by], references: [user_id], onUpdate: Restrict, map: "test_templates_ibfk_1")
  exam_boards   exam_boards                @relation(fields: [board_id], references: [board_id], onUpdate: Restrict, map: "test_templates_ibfk_2")

  @@index([board_id], map: "board_id")
  @@index([created_by], map: "created_by")
  @@index([source], map: "idx_templates_source")
}

model topics {
  topic_id    Int         @id @default(autoincrement())
  subject_id  Int
  topic_name  String      @db.VarChar(100)
  description String?     @db.Text
  subtopics   subtopics[]
  subjects    subjects    @relation(fields: [subject_id], references: [subject_id], onUpdate: Restrict, map: "topics_ibfk_1")

  @@unique([subject_id, topic_name], map: "unique_topic")
}

model user_roles {
  user_id BigInt
  role_id Int
  users   users  @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "user_roles_ibfk_1")
  roles   roles  @relation(fields: [role_id], references: [role_id], onUpdate: Restrict, map: "user_roles_ibfk_2")

  @@id([user_id, role_id])
  @@index([role_id], map: "role_id")
}

model users {
  user_id                              BigInt                 @id @default(autoincrement())
  email                               String                 @unique @db.VarChar(255)
  password                            String                 @db.VarChar(255)
  first_name                          String                 @db.VarChar(100)
  last_name                           String                 @db.VarChar(100)
  created_at                          DateTime               @default(now()) @db.Timestamp(0)
  last_login                          DateTime?              @db.Timestamp(0)
  active                              Boolean                @default(true)
  
  // Relations
  questions                           questions[]
  created_question_sets              question_sets[]        @relation("CreatedQuestionSets")
  test_executions                     test_executions[]
  assigned_test_plans                test_plans[]           @relation("test_plans_student_idTousers")
  planned_test_plans                 test_plans[]           @relation("test_plans_planned_byTousers")
  test_templates                      test_templates[]
  user_roles                          user_roles[]
  achievements_earned                student_achievements[]
  tutor_groups                       study_groups[]        @relation("TutorGroups")
  student_groups                     study_groups[]        @relation("GroupStudents")
  group_memberships                  group_members[]
  subject_mastery                     subject_mastery[]
  student_progress                   student_progress?
  activity_logs                      activity_log[]
  student_rewards                    student_rewards[]
  guardian_relationships             student_guardians[]   @relation("guardian_relationships")
  student_relationships              student_guardians[]   @relation("student_relationships")
  assignments_created                test_assignments[]    @relation("assignment_creators")
  assignments_received               test_assignments[]    @relation("assigned_students")

  @@map("users")
}

model difficulty_levels {
  level_id        Int       @id @default(autoincrement())
  level_name      String    @unique(map: "level_name") @db.VarChar(50)
  level_value     Int       @unique(map: "level_value")
  purpose         String    @db.Text
  characteristics String    @db.Text
  focus_area      String    @db.Text
  steps_required  String?   @db.VarChar(50)
  created_at      DateTime? @default(now()) @db.Timestamp(0)
  active          Boolean?  @default(true)
}

model student_progress {
  user_id            BigInt    @id
  level              Int       @default(1)
  current_xp         Int       @default(0)
  next_level_xp      Int       @default(1000)
  streak_days        Int       @default(0)
  last_activity_date DateTime? @db.Timestamp(0)
  total_points       Int       @default(0)
  created_at         DateTime? @default(now()) @db.Timestamp(0)
  updated_at         DateTime? @default(now()) @db.Timestamp(0)
  user               users     @relation(fields: [user_id], references: [user_id])

  @@index([user_id])
}

model achievements {
  achievement_id       BigInt                 @id @default(autoincrement())
  title                String                 @db.VarChar(255)
  description          String                 @db.Text
  category             String                 @db.VarChar(50)
  points               Int
  icon                 String?                @db.VarChar(100)
  required_criteria    String                 @db.Text
  created_at           DateTime?              @default(now()) @db.Timestamp(0)
  student_achievements student_achievements[]

  @@index([category])
}

model student_achievements {
  user_id        BigInt
  achievement_id BigInt
  unlocked_at    DateTime?    @default(now()) @db.Timestamp(0)
  progress       Int          @default(0)
  user           users        @relation(fields: [user_id], references: [user_id])
  achievements   achievements @relation(fields: [achievement_id], references: [achievement_id])

  @@id([user_id, achievement_id])
  @@index([user_id])
}

model rewards {
  reward_id       BigInt            @id @default(autoincrement())
  title           String            @db.VarChar(255)
  description     String            @db.Text
  category        String            @db.VarChar(50)
  cost            Int
  icon            String?           @db.VarChar(100)
  created_at      DateTime?         @default(now()) @db.Timestamp(0)
  student_rewards student_rewards[]

  @@index([category])
}

model student_rewards {
  user_id      BigInt
  reward_id    BigInt
  purchased_at DateTime? @default(now()) @db.Timestamp(0)
  user         users     @relation(fields: [user_id], references: [user_id])
  rewards      rewards   @relation(fields: [reward_id], references: [reward_id])

  @@id([user_id, reward_id])
  @@index([user_id])
}

model subject_mastery {
  user_id                   BigInt
  subject_id                Int
  mastery_level             Int       @default(0)
  total_questions_attempted Int       @default(0)
  correct_answers           Int       @default(0)
  last_test_date            DateTime? @db.Timestamp(0)
  user                      users     @relation(fields: [user_id], references: [user_id])
  subjects                  subjects  @relation(fields: [subject_id], references: [subject_id])

  @@id([user_id, subject_id])
  @@index([user_id])
}

model activity_log {
  activity_id   BigInt    @id @default(autoincrement())
  user_id       BigInt
  activity_type String    @db.VarChar(50)
  xp_earned     Int       @default(0)
  details       String?   @db.Text
  created_at    DateTime? @default(now()) @db.Timestamp(0)
  user          users     @relation(fields: [user_id], references: [user_id])

  @@index([user_id, created_at])
}

model level_config {
  level       Int      @id
  xp_required Int
  created_at  DateTime @default(now()) @db.Timestamp(0)
}

enum test_executions_status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum test_templates_source {
  SYSTEM
  USER
}

enum exam_boards_input_type {
  NUMERIC
  MCQ
}

enum test_plans_test_type {
  TOPIC
  MIXED
  MENTAL_ARITHMETIC
}

enum test_plans_timing_type {
  TIMED
  UNTIMED
}

enum test_templates_test_type {
  TOPIC
  MIXED
  MENTAL_ARITHMETIC
}

enum test_templates_timing_type {
  TIMED
  UNTIMED
}

enum GuardianRelationType {
  PARENT
  TUTOR
}

enum GuardianRelationStatus {
  PENDING
  ACTIVE
  INACTIVE
}

enum TestAssignmentStatus {
  PENDING
  COMPLETED
  OVERDUE
}

model study_groups {
  group_id    BigInt      @id @default(autoincrement())
  group_name  String      @db.VarChar(255)
  description String?     @db.Text
  tutor_id    BigInt
  created_at  DateTime?   @default(now()) @db.Timestamp(0)
  updated_at  DateTime?   @default(now()) @db.Timestamp(0)
  
  // Relations
  tutor       users       @relation("TutorGroups", fields: [tutor_id], references: [user_id])
  students    users[]     @relation("GroupStudents")
  members     group_members[]
  assignments test_assignments[]
  test_plans  test_plans[] @relation("GroupTests")

  @@index([tutor_id])
}

model student_guardians {
  relationship_id   BigInt                @id @default(autoincrement())
  guardian_id       BigInt
  student_id        BigInt
  relationship_type GuardianRelationType
  status           GuardianRelationStatus @default(PENDING)
  created_at       DateTime?              @default(now()) @db.Timestamp(0)
  updated_at       DateTime?              @default(now()) @db.Timestamp(0)
  
  // Relations
  guardian         users                  @relation("guardian_relationships", fields: [guardian_id], references: [user_id])
  student          users                  @relation("student_relationships", fields: [student_id], references: [user_id])

  @@unique([guardian_id, student_id], map: "unique_guardian_student")
  @@index([guardian_id])
  @@index([student_id])
}

model group_members {
  group_id   BigInt
  student_id BigInt
  joined_at  DateTime?    @default(now()) @db.Timestamp(0)
  
  // Relations
  group      study_groups @relation(fields: [group_id], references: [group_id])
  student    users       @relation(fields: [student_id], references: [user_id])

  @@id([group_id, student_id])
  @@index([group_id])
  @@index([student_id])
}

model test_assignments {
  assignment_id BigInt               @id @default(autoincrement())
  test_plan_id  BigInt
  assigned_by   BigInt
  group_id      BigInt?
  student_id    BigInt?
  due_date      DateTime            @db.Timestamp(0)
  status        TestAssignmentStatus @default(PENDING)
  created_at    DateTime?           @default(now()) @db.Timestamp(0)
  
  // Relations
  test_plan     test_plans          @relation(fields: [test_plan_id], references: [test_plan_id])
  assigner      users               @relation("assignment_creators", fields: [assigned_by], references: [user_id])
  group         study_groups?       @relation(fields: [group_id], references: [group_id])
  student       users?              @relation("assigned_students", fields: [student_id], references: [user_id])

  @@index([test_plan_id])
  @@index([assigned_by])
  @@index([group_id])
  @@index([student_id])
}
